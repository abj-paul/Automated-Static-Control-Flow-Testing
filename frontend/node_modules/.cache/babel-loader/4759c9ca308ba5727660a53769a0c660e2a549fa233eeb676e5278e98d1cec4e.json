{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\cpp\\\\Automated-Static-Control-Flow-Testing\\\\frontend\\\\src\\\\components\\\\TreeVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Tree from 'react-d3-tree';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeVisualization = () => {\n  _s();\n  const [treeData, setTreeData] = useState(null);\n  useEffect(() => {\n    const convertASTToTreeData = node => {\n      const treeData = {\n        name: node._nodetype,\n        children: [],\n        attributes: {}\n      };\n      if (node.coord) {\n        const coord = node.coord.split(':');\n        const {\n          file,\n          line,\n          column\n        } = {\n          file: coord[0],\n          line: coord[1],\n          column: coord[2]\n        };\n        treeData.attributes = {\n          ...treeData.attributes,\n          file,\n          line,\n          column\n        };\n      }\n      if (node.name) {\n        if (node.name._nodetype) {\n          treeData.children.push(convertASTToTreeData(node.name));\n        } else treeData.attributes = {\n          ...treeData.attributes,\n          name: node.name\n        };\n      }\n      if (node.declname) {\n        treeData.attributes = {\n          ...treeData.attributes,\n          declname: node.declname\n        };\n      }\n      if (node.names) {\n        node.names.map(child => treeData.attributes = {\n          ...treeData.attributes,\n          names: child\n        });\n      }\n      if (node.type) {\n        if (node.type._nodetype) {\n          treeData.children.push(convertASTToTreeData(node.type));\n        } else treeData.attributes = {\n          ...treeData.attributes,\n          type: node.type\n        };\n      }\n      if (node.value) {\n        treeData.attributes = {\n          ...treeData.attributes,\n          value: node.value\n        };\n      }\n      if (node.body) {\n        treeData.children.push(convertASTToTreeData(node.body));\n      }\n      if (node.expr) {\n        console.log(node.expr);\n        treeData.children.push(convertASTToTreeData(node.expr));\n      }\n      if (node.decl) {\n        treeData.children.push(convertASTToTreeData(node.decl));\n      }\n      if (node.block_items) {\n        node.block_items.map(child => treeData.children.push(convertASTToTreeData(child)));\n      }\n      if (node.ext) {\n        node.ext.map(child => treeData.children.push(convertASTToTreeData(child)));\n      }\n      return treeData;\n    };\n    fetch('/astTest.json').then(response => response.json()).then(data => {\n      const treeData = convertASTToTreeData(data);\n      setTreeData(treeData);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '500px'\n    },\n    children: treeData ?\n    /*#__PURE__*/\n    // console.log(treeData),\n    _jsxDEV(Tree, {\n      data: treeData,\n      orientation: \"vertical\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualization, \"DU6Sp2gzfXs0OkYeZ222lySI+Co=\");\n_c = TreeVisualization;\nexport default TreeVisualization;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualization\");","map":{"version":3,"names":["React","useState","useEffect","Tree","jsxDEV","_jsxDEV","TreeVisualization","_s","treeData","setTreeData","convertASTToTreeData","node","name","_nodetype","children","attributes","coord","split","file","line","column","push","declname","names","map","child","type","value","body","expr","console","log","decl","block_items","ext","fetch","then","response","json","data","catch","error","style","width","height","orientation","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/cpp/Automated-Static-Control-Flow-Testing/frontend/src/components/TreeVisualization.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Tree from 'react-d3-tree';\r\n\r\nconst TreeVisualization = () => {\r\n  const [treeData, setTreeData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const convertASTToTreeData = (node) => {\r\n      const treeData = { \r\n        name: node._nodetype ,\r\n        children: [],\r\n        attributes: {}\r\n      };\r\n\r\n      if(node.coord){\r\n        const coord = node.coord.split(':');\r\n        const { file, line, column } = { file: coord[0], line: coord[1], column: coord[2] };\r\n        treeData.attributes = { ...treeData.attributes, file, line, column };\r\n      }\r\n\r\n      if (node.name) {\r\n        if(node.name._nodetype){\r\n          treeData.children.push(convertASTToTreeData(node.name));\r\n        } else treeData.attributes = { ...treeData.attributes, name: node.name };\r\n      }\r\n\r\n      if (node.declname) {\r\n        treeData.attributes = { ...treeData.attributes, declname: node.declname };\r\n      }\r\n\r\n      if (node.names) {\r\n        node.names.map((child) => treeData.attributes = { ...treeData.attributes, names: child });\r\n      }\r\n\r\n      if (node.type) {\r\n        if(node.type._nodetype){\r\n          treeData.children.push(convertASTToTreeData(node.type));\r\n        }\r\n        else treeData.attributes = { ...treeData.attributes, type: node.type };\r\n      }\r\n\r\n      if (node.value) {\r\n        treeData.attributes = { ...treeData.attributes, value: node.value };\r\n      }\r\n\r\n      if(node.body){  \r\n        treeData.children.push(convertASTToTreeData(node.body));\r\n      }\r\n\r\n      if(node.expr){\r\n        console.log(node.expr);\r\n        treeData.children.push(convertASTToTreeData(node.expr));\r\n      }\r\n\r\n      if(node.decl){\r\n        treeData.children.push(convertASTToTreeData(node.decl));\r\n      }\r\n\r\n      if(node.block_items){\r\n        node.block_items.map((child) => treeData.children.push(convertASTToTreeData(child)));\r\n      }\r\n      \r\n      if (node.ext) {\r\n        node.ext.map((child) => treeData.children.push(convertASTToTreeData(child)));\r\n      }\r\n  \r\n      return treeData;\r\n    };\r\n    \r\n    fetch('/astTest.json')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const treeData = convertASTToTreeData(data);\r\n        setTreeData(treeData);\r\n      })\r\n      .catch((error) => console.error('Error fetching data:', error));\r\n  }, []);\r\n\r\n  \r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '500px' }}>\r\n      {treeData ? (\r\n        // console.log(treeData),\r\n        <Tree data={treeData} orientation=\"vertical\" />\r\n      ) : (\r\n        <p>Loading data...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualization;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}