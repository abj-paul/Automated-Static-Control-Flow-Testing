* About
C has always been a language where few automations were developed, mainly due to the mindset of the community. This is a project to automate test case generation for static control flow testing.

* Installation
#+begin_src bash
cd backend
python3 -m venv backendEnv
source backendEnv/bin/activate
pip install -r requirements.txt

uvicorn main:app --reload
#pip install pycparser #https://github.com/eliben/pycparser/tree/master
#+end_src
#

* Endpoints
We have two endpoints available. 
** /api/v1/code/project
It takes the url of the C project as input, builds ast for each file of the project and returns it, along with the variables defined in the code. We need to test these variables.

The following is the input.
#+begin_src json
{
	"code_url": "./project-to-test/"
}
#+end_src
The following is a part of the output.
#+begin_src json
{
	"numberOfAsts": 1,
	"asts": [
		"{\n    \"_nodetype\": \"FileAST\",\n    \"coord\": null,\n    \"ext\": [\n   
...
		}
	"variables": [
			"paste",
			"matrix",
			"foo"
		]
}
#+end_src
** /api/v1/code/code
It takes the url of a single C file as input, builds ast for it and returns it.

The following is the input.
#+begin_src json
{
	"code_url": "./project-to-test/"
}
#+end_src
The following is a part of the output.
#+begin_src json
{
	"ast": [
		"{\n    \"_nodetype\": \"FileAST\",\n    \"coord\": null,\n    \"ext\": [\n   
...
		}
	"variables": [
			"paste",
			"matrix",
			"foo"
		]
}
#+end_src

* Execute
We have a sample c file at ~test.c~. You can find more complex examples here [[https://github.com/eliben/pycparser/tree/master/examples][here]]. Check the c_files directory.

Our main.py contains a boilerplate code from the above [[https://github.com/eliben/pycparser/tree/master/examples][link]]. This code converts a c file into a AST json format. You can run it by simply doing ~python3 main.py~.

* TODO
- [ ] Understanding AST : @Rifah @Muktadul
- [X] Converting JSON to Graph visualization @abhijit
- [ ] DFS to find independent paths @Abhijit
** More structured scheme
We built one static control flow graph for each function when performing unit testing. So we will do the same here as well.
1. Split functions
2. For each function, draw an AST
3. Find variables and independent paths in those AST

Let us start from the beginning again.
