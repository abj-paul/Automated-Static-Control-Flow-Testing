* About
C has always been a language where few automations were developed, mainly due to the mindset of the community. This is a project to automate test case generation for static control flow testing.
** Branches
Currently we are working on two branch.
- dev branch is implementing the AST
- backend branch is implementing the miscellaneouns functionalities

* Installation
#+begin_src bash
cd backend
python3 -m venv backendEnv
source backendEnv/bin/activate
pip install -r requirements.txt

uvicorn main:app --reload
#pip install pycparser #https://github.com/eliben/pycparser/tree/master
#+end_src
#

* Endpoints
We have two endpoints available. 
** /api/v1/code/project
It takes the url of the C project as input, builds ast for each file of the project and returns it, along with the variables defined in the code. We need to test these variables.

Note that, it returns everything in a 2D array. For each file, it creates a list of variables and asts. And then it pushes the lists in a super list(list of list so 2D) and returns it.

The following is the input.
#+begin_src json
{
	"code_url": "./project-to-test/"
}
#+end_src
The following is a part of the output.
#+begin_src json
{	
	"functions": [
		[
			"int main() {\n    int x = 10;\n    int y = 5;\n\n    if (x > 5) {\n        printf(\"x is greater than 5\\n\");\n    } else {\n        printf(\"x is not greater than 5\\n\");\n    }\n\n    if (y > 5) {\n        printf(\"y is greater than 5\\n\");\n    } else {\n        printf(\"y is not greater than 5\\n\");\n    }\n\n    return 0;\n}"
		],
		[
			"int main() {\n    int x = 10;\n    int y = 5;\n\n    if (x > 5) {\n        y = 10;\n    } else if (x < 5) {\n        y = 20;\n    } else {\n        y = 30;\n    }\n\n    while (x > 0) {\n        x--;\n    }\n\n    return 0;\n}"
		]
	],
	"asts": [
		[
		"{\n    \"_nodetype\": \"FileAST\",\n    \"coord\": null,\n    \"ext\": [\n   
...
		}
		]
	"variables": [[
			"paste",
			"matrix",
			"foo"
		]
		]
}
#+end_src
** /api/v1/code/code
It takes the url of a single C file as input, builds ast for each of its functions and returns it.
Note that, a file may have multiple functions so it returns a list of asts along with the corresponding function.

The following is the input.
#+begin_src json
{
	"code_url": "./project-to-test/"
}
#+end_src
The following is a part of the output.
#+begin_src json
{
	"functions": [
		[
			"int main() {\n    int x = 10;\n    int y = 5;\n\n    if (x > 5) {\n        printf(\"x is greater than 5\\n\");\n    } else {\n        printf(\"x is not greater than 5\\n\");\n    }\n\n    if (y > 5) {\n        printf(\"y is greater than 5\\n\");\n    } else {\n        printf(\"y is not greater than 5\\n\");\n    }\n\n    return 0;\n}"
		],
		[
			"int main() {\n    int x = 10;\n    int y = 5;\n\n    if (x > 5) {\n        y = 10;\n    } else if (x < 5) {\n        y = 20;\n    } else {\n        y = 30;\n    }\n\n    while (x > 0) {\n        x--;\n    }\n\n    return 0;\n}"
		]
	],
	"asts": [
		"{\n    \"_nodetype\": \"FileAST\",\n    \"coord\": null,\n    \"ext\": [\n   
...
		}
	"variables": [
			"paste",
			"matrix",
			"foo"
		]
}
#+end_src


* Execute
We have a sample c file at ~test.c~. You can find more complex examples here [[https://github.com/eliben/pycparser/tree/master/examples][here]]. Check the c_files directory.

Our main.py contains a boilerplate code from the above [[https://github.com/eliben/pycparser/tree/master/examples][link]]. This code converts a c file into a AST json format. You can run it by simply doing ~python3 main.py~.

* TODO
- [ ] Understanding AST : @Rifah @Muktadul
- [ ] Converting JSON to Graph visualization @Jubaeer
- [ ] DFS to find independent paths @Abhijit
